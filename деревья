#include <stdio.h>
#include <stdlib.h>
#include <time.h>
typedef struct Node
{
	int key;
	struct Node* left;
	struct Node* right;
}TreeNode;
FILE *file;
TreeNode* treeInsert(TreeNode* t, int data)
{
	TreeNode* newNode;
	newNode = (TreeNode*)malloc(sizeof(TreeNode));
	newNode->key = data;
	newNode->left = NULL;
	newNode->right = NULL;
	TreeNode* current;
	TreeNode* parent = t;
	if (t == NULL)
	{
		t = newNode;

	}else{
	
		while (current->key != data)
		{
			parent = current;

			if (current->key > data)
			{
				current = current->left;
				if (current == NULL)
				{
					parent->left = newNode;
					return t;

				}
				} else {
					current = current->right;
					if (current == NULL)
					{
						parent->right = newNode;
					}
				}

			}
		}
		return t;
	}

void printTree(TreeNode* root)
{
	if (root)
	{
		printf(" % d", root->key);
		if (root->left || root->right)
		{
			printf("(");

			if (root->left)
				printTree(root->right);
			else
				printf("NULL");
			printf(",");
			if (root->right)
				printTree(root->right);
			else
				printf("NULL");
			printf(")");
		}

	}
}

void RandomSeed(TreeNode* t, int data)
{
	for (size_t i = 0; i < 50; i++)
	{

		TreeNode* tree = treeInsert(tree, rand());
		for (size_t f = 0; f < 200; f++)
		{
			treeInsert(tree, rand());
		
		}
	}
}
int height(struct node* node);
bool isBalanced(struct node* root)
{
	int lh;
	int rh;
	if (root == NULL)
		return 1;
	lh = height(root->left);
	rh = height(root->right);

	if (abs(lh - rh) <= 1 && isBalanced(root->left)
		&& isBalanced(root->right))
		return 1;
	return 0;
}
struct tree* search_tree(struct tree* root, char key)
{
	if (!root) return root;  /* пустое дерево */
	while (root->info != key) {
		if (keyinfo) root = root->left;
		else root = root->right;
		if (root == NULL) break;
	}
	return root;
}




int main()
{

	TreeNode* tree;
	srand(time(NULL));
	RandomSeed(tree, rand());
	if (isBalanced(root))
		printf("Tree is balanced");
	else
		printf("Tree is not balanced");
	search_tree;
}
