#include <stdio.h>
#include <stdlib.h>
#define SZ 10
#define MAX 10
int count = 0;
struct stack {
    int items[MAX];
    int top;
};
typedef struct stack st;
void createEmptyStack(st* s) {
    s->top = -1;
}
int isfull(st* s) {
    if (s->top == MAX - 1)
        return 1;
    else
        return 0;
}
void push(st* s, int newitem) {
    if (isfull(s)) {
        printf("Стек заполнен");
    }
    else {
        s->top++;
        s->items[s->top] = newitem;
    }
    count++;
}
void printStack(st* s) {
    printf("stek: ");
    for (int i = 0; i < count; i++) {
        printf("%d ", s->items[i]);
    }
    printf("\n");
}
void binary(int n)
{
    int bin = 0, k = 1;

        if (n > 1)
            binary(n / 2);
        putchar(n % 2 + '0');
     
}

typedef struct
{
	int pr;
	int dat;
	}
Node;
Node* arr[SZ];
int head;
int tail;
int items;

void init()
{
	for (int i = 0; i < SZ; ++i)
	{
		arr[i] = NULL;
	}
    head = 0;
	tail = 0;
	items = 0;
	}
void ins(int pr, int dat)
{
	Node *node = (Node*)malloc(sizeof(Node));
	node->dat = dat;
	node->pr = pr;
	int flag;
	if (items == 0)
	{
		arr[tail++] = node;
		items++;
	}

	else if (items == SZ)
	{
		printf(" % s \n", "full");
		return;
	}
	else
	{
		int i = 0;
		int idx = 0;
		Node* tmp;
		for (i = head; i < tail; ++i)
		{
			idx = i % SZ;
			if (arr[idx]->pr > pr)
				break;
			else
				idx++;
		}
		flag = idx % SZ;
		i++;
		while (i <= tail)
		{
			{
				idx = i % SZ;
				tmp = arr[idx];
				arr[idx] = arr[flag];
				arr[flag] = tmp;
				i++;
			}
			arr[flag] = node;
			items++;
			tail++;
		}
	}
}
		Node* rem()
		{
			if (items == 0)
			{
				return NULL;
			}
			else
			{
				int idx = head++ % SZ;
				Node* tmp = arr[idx];
				arr[idx] = NULL;
				items--;
				return tmp;
			}
		}
		void printQueue()
		{
			printf("[ ");
			for (int i = 0; i < SZ; ++i)
			{
				if (arr[i] == NULL)
					printf("[*, *]");
			
			else printf("[%d,%d]", arr[i]->pr, arr[i]->dat);
		}
		printf("]\n");
	}
	int	main()
	{
		 int ch,n;
    st* s = (st*)malloc(sizeof(st));

    createEmptyStack(s);
    for (size_t i = 0; i < 5; i++)
    {
        scanf_s("%d", &n);
        binary(n);
        printf(" binar format\n");
        push(s, n);
    }

    printStack(s);
   
    int();
		ins(1, 11);
		ins(3, 22);
		ins(6, 33);
		ins(2, 44);
		ins(5, 55);
		ins(8, 66);
		ins(1, 77);
		ins(2, 88);
		ins(6, 99);
		ins(5, 100);
		printQueue();
			for (int i = 0; i < 7; i++)
			{
				Node* n = rem();
				printf("pr=%d, dat=%d\n", n->pr, n->dat);

			}
		printQueue();
			ins(1,110);
			ins(3, 120);
			ins(6, 130);
			printQueue();
			for (int i = 0 ; i < 5; ++i)
			{
				Node* n = rem();
				printf("pr = % d,dat=%d\n", n->pr, n->dat);
			}
		printQueue();
		return 0;
	

	}
